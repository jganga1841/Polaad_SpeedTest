"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var forms_1 = require('@angular/forms');
var common_1 = require('@angular/common');
var autocomplete_pipe_1 = require('./autocomplete.pipe');
var Item = (function () {
    function Item(source, textKey, valueKey) {
        if (typeof source === 'string') {
            this.text = this.value = source;
        }
        if (typeof source === 'object') {
            this.text = source[textKey];
            this.value = valueKey ? source[valueKey] : source;
        }
    }
    return Item;
}());
var noop = function () { };
var nextId = 0;
exports.MD_AUTOCOMPLETE_CONTROL_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return MdAutocomplete; }),
    multi: true
};
var MdAutocomplete = (function () {
    function MdAutocomplete(element) {
        this.element = element;
        this.change = new core_1.EventEmitter();
        this._value = '';
        this._isInitialized = false;
        this._onTouchedCallback = noop;
        this._onChangeCallback = noop;
        this._items = [];
        this.list = [];
        this.focusedOption = 0;
        this.inputBuffer = '';
        this.selectedItem = null;
        this.inputFocused = false;
        this.noBlur = true;
        this.id = 'md-autocomplete-' + (++nextId);
        this.disabled = false;
        this.tabindex = 0;
        this.placeholder = '';
        this.textKey = 'text';
        this.valueKey = null;
    }
    MdAutocomplete.prototype.ngAfterContentInit = function () { this._isInitialized = true; };
    Object.defineProperty(MdAutocomplete.prototype, "items", {
        set: function (value) {
            this._items = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdAutocomplete.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this.setValue(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * set value
     * @param value of ngModel
     */
    MdAutocomplete.prototype.setValue = function (value) {
        var _this = this;
        if (value !== this._value) {
            this._value = value;
            this.inputBuffer = '';
            if (value) {
                var selItm = this._items.find(function (i) { return _this.equals(_this.valueKey ? i[_this.valueKey] : i, value); });
                this.selectedItem = new Item(selItm, this.textKey, this.valueKey);
                if (this.selectedItem) {
                    this.inputBuffer = this.selectedItem.text;
                }
            }
            if (!this.inputBuffer) {
                this.inputBuffer = '';
            }
            if (this._isInitialized) {
                this._onChangeCallback(value);
                this.change.emit(this._value);
            }
        }
    };
    /**
     * Compare two vars or objects
     * @param o1 compare first object
     * @param o2 compare second object
     * @return boolean comparation result
     */
    MdAutocomplete.prototype.equals = function (o1, o2) {
        if (o1 === o2) {
            return true;
        }
        if (o1 === null || o2 === null) {
            return false;
        }
        if (o1 !== o1 && o2 !== o2) {
            return true;
        }
        var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
        if (t1 === t2 && t1 === 'object') {
            keySet = Object.create(null);
            for (key in o1) {
                if (!this.equals(o1[key], o2[key])) {
                    return false;
                }
                keySet[key] = true;
            }
            for (key in o2) {
                if (!(key in keySet) && key.charAt(0) !== '$' && o2[key]) {
                    return false;
                }
            }
            return true;
        }
        return false;
    };
    Object.defineProperty(MdAutocomplete.prototype, "isMenuVisible", {
        get: function () {
            return ((this.inputFocused || this.noBlur) && this.list && this.list.length && !this.selectedItem) ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * update scroll of suggestion menu
     */
    MdAutocomplete.prototype.updateScroll = function () {
        if (this.focusedOption < 0) {
            return;
        }
        var menuContainer = this.element.nativeElement.querySelector('.md-autocomplete-menu');
        if (!menuContainer) {
            return;
        }
        var choices = menuContainer.querySelectorAll('.md-option');
        if (choices.length < 1) {
            return;
        }
        var highlighted = choices[this.focusedOption];
        if (!highlighted) {
            return;
        }
        var top = highlighted.offsetTop + highlighted.clientHeight - menuContainer.scrollTop;
        var height = menuContainer.offsetHeight;
        if (top > height) {
            menuContainer.scrollTop += top - height;
        }
        else if (top < highlighted.clientHeight) {
            menuContainer.scrollTop -= highlighted.clientHeight - top;
        }
    };
    /**
     * input event listner
     * @param event
     */
    MdAutocomplete.prototype.inputKeydown = function (event) {
        var _this = this;
        if (this.disabled) {
            return;
        }
        // Down Arrow
        if (event.keyCode === 40) {
            if (!this.isMenuVisible) {
                return;
            }
            event.stopPropagation();
            event.preventDefault();
            this.focusedOption = (this.focusedOption === this.list.length - 1) ? 0 : Math.min(this.focusedOption + 1, this.list.length - 1);
            this.updateScroll();
            return;
        }
        // Up Arrow
        if (event.keyCode === 38) {
            if (!this.isMenuVisible) {
                return;
            }
            event.stopPropagation();
            event.preventDefault();
            this.focusedOption = (this.focusedOption === 0) ? this.list.length - 1 : Math.max(0, this.focusedOption - 1);
            this.updateScroll();
            return;
        }
        // Tab Key
        if (event.keyCode === 9) {
            this.listLeave();
            return;
        }
        // Escape Key
        if (event.keyCode === 27) {
            event.stopPropagation();
            event.preventDefault();
            this.onClear();
            return;
        }
        // Enter
        if (event.keyCode === 13) {
            if (this.isMenuVisible) {
                this.select(event, this.focusedOption);
            }
            event.preventDefault();
            return;
        }
        // filter
        setTimeout(function () {
            _this.updateItems(new RegExp(_this.inputBuffer, 'ig'));
        }, 10);
    };
    /**
     * select option
     * @param event
     * @param index of selected item
     */
    MdAutocomplete.prototype.select = function (event, index) {
        event.preventDefault();
        event.stopPropagation();
        this.selectedItem = this.list[index];
        this.inputBuffer = this.list[index].text;
        this.updateValue();
    };
    /**
     * clear selected suggestion
     */
    MdAutocomplete.prototype.onClear = function () {
        if (this.disabled) {
            return;
        }
        this.inputBuffer = '';
        this.selectedItem = null;
        this.updateItems(new RegExp(this.inputBuffer, 'ig'));
        this._value = this.selectedItem ? this.selectedItem.value : this.selectedItem;
        this.updateValue();
    };
    /**
     * update value
     */
    MdAutocomplete.prototype.updateValue = function () {
        this._value = this.selectedItem ? this.selectedItem.value : this.selectedItem;
        this._onChangeCallback(this._value);
        this.change.emit(this._value);
        this.onFocus();
    };
    /**
     * component focus listener
     */
    MdAutocomplete.prototype.onFocus = function () {
        if (this.disabled) {
            return;
        }
        this.element.nativeElement.querySelector('input').focus();
    };
    /**
     * input focus listener
     */
    MdAutocomplete.prototype.onInputFocus = function () {
        this.inputFocused = true;
        this.updateItems(new RegExp(this.inputBuffer, 'ig'));
        this.focusedOption = 0;
    };
    /**
     * input blur listener
     */
    MdAutocomplete.prototype.onInputBlur = function () {
        this.inputFocused = false;
    };
    /**
     * suggestion menu mouse enter listener
     */
    MdAutocomplete.prototype.listEnter = function () { this.noBlur = true; };
    /**
     * suggestion menu mouse leave listener
     */
    MdAutocomplete.prototype.listLeave = function () { this.noBlur = false; };
    /**
     * Update suggestion to filter the query
     * @param query
     */
    MdAutocomplete.prototype.updateItems = function (query) {
        var _this = this;
        this.list = this._items.map(function (i) { return new Item(i, _this.textKey, _this.valueKey); }).filter(function (i) { return query.test(i.text); });
        if (this.list.length && this.list[0].text !== this.inputBuffer) {
            this.selectedItem = null;
        }
    };
    MdAutocomplete.prototype.writeValue = function (value) { this.setValue(value); };
    MdAutocomplete.prototype.registerOnChange = function (fn) { this._onChangeCallback = fn; };
    MdAutocomplete.prototype.registerOnTouched = function (fn) { this._onTouchedCallback = fn; };
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], MdAutocomplete.prototype, "change", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], MdAutocomplete.prototype, "id", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], MdAutocomplete.prototype, "disabled", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], MdAutocomplete.prototype, "tabindex", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], MdAutocomplete.prototype, "placeholder", void 0);
    __decorate([
        core_1.Input('item-text'), 
        __metadata('design:type', String)
    ], MdAutocomplete.prototype, "textKey", void 0);
    __decorate([
        core_1.Input('item-value'), 
        __metadata('design:type', String)
    ], MdAutocomplete.prototype, "valueKey", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Array), 
        __metadata('design:paramtypes', [Array])
    ], MdAutocomplete.prototype, "items", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], MdAutocomplete.prototype, "value", null);
    MdAutocomplete = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'md-autocomplete',
            template: "\n    <div class=\"md-autocomplete-wrap\">\n      <input [(ngModel)]=\"inputBuffer\" type=\"text\" tabs=\"false\" autocomplete=\"off\" [tabindex]=\"disabled ? -1 : tabindex\" [disabled]=\"disabled\" class=\"md-autocomplete-input\" [placeholder]=\"placeholder\" (focus)=\"onInputFocus()\" (blur)=\"onInputBlur()\" (keydown)=\"inputKeydown($event)\" (change)=\"$event.stopPropagation()\" />\n      <em *ngIf=\"inputBuffer\" (click)=\"onClear()\" class=\"md-autocomplete-clear-icon\"></em>\n    </div>\n    <ul *ngIf=\"isMenuVisible\" class=\"md-autocomplete-menu\" (mouseenter)=\"listEnter()\" (mouseleave)=\"listLeave()\">\n      <li class=\"md-option\" *ngFor=\"let l of list; let i = index;\" [class.focus]=\"focusedOption === i\" (click)=\"select($event, i)\">\n        <div class=\"md-text\" [innerHtml]=\"l.text | hightlight:inputBuffer\"></div>\n      </li>\n    </ul>\n  ",
            styles: ["\n    .md-autocomplete { position: relative; display: block; outline: none; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; -moz-backface-visibility: hidden; -webkit-backface-visibility: hidden; backface-visibility: hidden; }\n    .md-autocomplete .md-autocomplete-wrap { position: relative; display: block; width: 100%; padding: 2px 0 1px; border-bottom: 1px solid rgba(0, 0, 0, 0.38); -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box; min-width: 64px; min-height: 26px; max-height: 90px; cursor: pointer; }\n    .md-autocomplete.disabled .md-autocomplete-wrap { color: rgba(0,0,0,0.38); }\n    .md-autocomplete-wrap .md-autocomplete-input { width: 100%; height: 26px; outline: none; background: transparent; border: 0; -moz-box-sizing: content-box; -webkit-box-sizing: content-box; box-sizing: content-box; }\n    .md-autocomplete-wrap .md-autocomplete-clear-icon { position: absolute; top: 50%; right: 0; display: inline-block; width: 18px; height: 18px; margin: -9px 2px 0; overflow: hidden; }\n    .md-autocomplete-wrap .md-autocomplete-clear-icon::before,\n    .md-autocomplete-wrap .md-autocomplete-clear-icon::after { content: ''; position: absolute; height: 2px; width: 100%; top: 50%; left: 0; margin-top: -1px; background: #888; border-radius: 2px; height: 2px; }\n    .md-autocomplete-wrap .md-autocomplete-clear-icon::before { -webkit-transform: rotate(45deg); -moz-transform: rotate(45deg); -ms-transform: rotate(45deg); -o-transform: rotate(45deg); transform: rotate(45deg); }\n    .md-autocomplete-wrap .md-autocomplete-clear-icon::after { -webkit-transform: rotate(-45deg); -moz-transform: rotate(-45deg); -ms-transform: rotate(-45deg); -o-transform: rotate(-45deg); transform: rotate(-45deg); }\n    .md-autocomplete-menu { position: absolute; left: 0; top: 100%; display: block; z-index: 10; width: 100%; margin: 0; padding: 8px 0; box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14), 0 2px 1px -1px rgba(0, 0, 0, 0.12); max-height: 256px; min-height: 48px; overflow-y: auto; background: #fff; }\n    .md-autocomplete-menu .md-option { position: relative; display: block; cursor: pointer; width: auto; padding: 0 16px; height: 48px; line-height: 48px; -moz-transition: background 0.15s linear; -o-transition: background 0.15s linear; -webkit-transition: background 0.15s linear; transition: background 0.15s linear; }\n    .md-autocomplete-menu .md-option:hover,\n    .md-autocomplete-menu .md-option.focus { background: #eeeeee; }\n    .md-autocomplete-menu .md-option .md-text { width: auto; white-space: nowrap; overflow: hidden; -ms-text-overflow: ellipsis; -o-text-overflow: ellipsis; text-overflow: ellipsis; font-size: 16px; }\n    .md-autocomplete-menu .highlight { color: #757575; }\n  "],
            host: {
                'role': 'autocomplete',
                '[id]': 'id',
                '[class.md-autocomplete]': 'true',
                '[class.md-autocomplete-disabled]': 'disabled',
                '[attr.aria-disabled]': 'disabled'
            },
            providers: [exports.MD_AUTOCOMPLETE_CONTROL_VALUE_ACCESSOR],
            encapsulation: core_1.ViewEncapsulation.None
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef])
    ], MdAutocomplete);
    return MdAutocomplete;
}());
exports.MdAutocomplete = MdAutocomplete;
exports.MD_AUTOCOMPLETE_DIRECTIVES = [MdAutocomplete, autocomplete_pipe_1.HightlightPipe];
var MdAutocompleteModule = (function () {
    function MdAutocompleteModule() {
    }
    MdAutocompleteModule = __decorate([
        core_1.NgModule({
            declarations: exports.MD_AUTOCOMPLETE_DIRECTIVES,
            imports: [common_1.CommonModule, forms_1.FormsModule],
            exports: exports.MD_AUTOCOMPLETE_DIRECTIVES,
        }), 
        __metadata('design:paramtypes', [])
    ], MdAutocompleteModule);
    return MdAutocompleteModule;
}());
exports.MdAutocompleteModule = MdAutocompleteModule;

//# sourceMappingURL=autocomplete.js.map
